% This script is for performing source localisation on the Control group

clear;close all;clc;
addpath('C:\Users\SC10\OneDrive - Trinity College Dublin\Documents\MATLAB\eeglab2021.1_old')
inputpath  = 'D:\Jorge\Data\Fan_healthy_data\All_paradigm_data\1 Preprocessing_eeglab\';
cd(inputpath)

    sublists= {'SDT001','AAT002','CAS003','MUS004','OET005','EAW006', ...
            'NIS007','CUD008','PEB009','EOS012','RNZ014','AMY015', ...
            'PBC016','CHY017','CRY018','TAA019','CAS020','EUS021','GYW022', ...
            'ROR024','LAS026','JUT028','DIT029','AOR030','SOS031', ...
            'LAS032','SRS033','OOS034','ELR035','SES036','DUS037','MRV038', ...
            'LAS039','SAW040','MIR041','CEX043','SOS044','REZ045','LAS046'};

    subnames  = {'sdt_001','aat_002','cas_003','mus_004','oet_005','eaw_006',...
                'nis_007','cud_008','peb_009','eos_012','rnz_014','amy_015',...
                'pbc_016','chy_017','cry_018','taa_019','cas_020','eus_021','gyw_022', ...
                'ror_024','las_026','jut_028','dit_029','aor_030','sos_031', ...
                'las_032','srs_033','oos_034','elr_035','ses_036','dus_037','mrv_038', ...
                'las_039','saw_040','mir_041','cex_043','sos_044','rez_045','las_046'};

COMP=[3,1;3,4;2,1];
PE={'sPE','cPE','pPE'};

 binlabels = {'B1(condition1)','B2(condition2)','B3(condition3)','B4(condition4)'};
 resultpath='D:\Jorge\Data\Source_localisation_data\Controls\';

 brainstorm
 eeglab
 close all
 
ProtocolName = 'Controls';
% % Create new protocol
% gui_brainstorm('CreateProtocol', ProtocolName, 0, 0);

iProtocol=bst_get('Protocol',ProtocolName);
if exist("iProtocol")
    gui_brainstorm('SetCurrentProtocol',iProtocol)
end

Info=bst_get('ProtocolInfo');%make sure use default anatomy is selected

%% Run analyses in brainstorm

 % For indexing in brainstorm
for isub=1:2
    sublist=sublists{isub};
    subname=subnames{isub};

    Files{isub}=strcat(inputpath,char(sublist),'\',char(subname),'_PE_final.set');%Create path to rawfile data

    % Run analysis using brainstorm
    % Input files
    sFiles = [];
    SubjectNames = subnames;
    
    % Process: Import MEG/EEG: Events
        sFiles=[];
        sFiles = bst_process('CallProcess', 'process_import_data_event', sFiles, [], ...
            'subjectname',   SubjectNames{isub}, ...
            'condition',     '', ...
            'datafile',      {{Files{isub}}, 'EEG-EEGLAB'}, ...
            'eventname',     'B1(condition1), B2(condition2), B3(condition3),B4(condition4)', ...
            'timewindow',    [-0.1, 1.848], ...
            'epochtime',     [-0.1, 1.848], ...
            'split',         0, ...
            'createcond',    1, ...
            'ignoreshort',   1, ...
            'channelalign',  1, ...
            'usectfcomp',    1, ...
            'usessp',        1, ...
            'freq',          [], ...
            'baseline',      [], ...
            'blsensortypes', 'MEG, EEG');
        
    % Process: Average: By trial group (folder average)
    sFiles = bst_process('CallProcess', 'process_average', sFiles, [], ...
        'avgtype',       5, ...  % By trial group (folder average)
        'avg_func',      1, ...  % Arithmetic average:  mean(x)
        'weighted',      0, ...
        'keepevents',    0);

    sFiles_avg=sFiles;
    
    % Input files
    sFiles = sFiles_avg(3).FileName; %Use condition with fewest trials to compute a headmodel
  
    % Process: Compute head model
    sFiles = bst_process('CallProcess', 'process_headmodel', sFiles, [], ...
        'Comment',     '', ...
        'sourcespace', 1, ...  % Cortex surface
        'meg',         1, ...  % 
        'eeg',         3, ...  % OpenMEEG BEM
        'ecog',        1, ...  % 
        'seeg',        1, ...  % 
        'openmeeg',    struct(...
             'BemSelect',    [1, 1, 1], ...
             'BemCond',      [1, 0.0125, 1], ...
             'BemNames',     {{'Scalp', 'Skull', 'Brain'}}, ...
             'BemFiles',     {{}}, ...
             'isAdjoint',    0, ...
             'isAdaptative', 1, ...
             'isSplit',      0, ...
             'SplitLength',  4000), ...
        'channelfile', '');

    temp=bst_get('Study');
    headmodel=temp.HeadModel.FileName;

    %Copy this head model to other condition folders
    db_set_headmodel(headmodel,'AllConditions');

    temp=[];
    headmodel=[];

    %Change sFiles back to average of conditions for the covariance matrices
    sFiles=sFiles_avg;

    % Process: Compute covariance (noise or data)
    sFiles = bst_process('CallProcess', 'process_noisecov', sFiles, [], ...
        'baseline',       [-0.1, 0], ...
        'datatimewindow', [0, 1.848], ...
        'sensortypes',    ' EEG', ...
        'target',         1, ...  % Noise covariance     (covariance over baseline time window)
        'dcoffset',       1, ...  % Block by block, to avoid effects of slow shifts in data
        'identity',       0, ...
        'copycond',       0, ...
        'copysubj',       0, ...
        'copymatch',      0, ...
        'replacefile',    1);  % Replace
    
    % Process: Compute sources [2018]
    sFiles = bst_process('CallProcess', 'process_inverse_2018', sFiles, [], ...
        'output',  1, ...  % Kernel only: shared
        'inverse', struct(...
             'Comment',        'sLORETA: EEG', ...
             'InverseMethod',  'minnorm', ...
             'InverseMeasure', 'sloreta', ...
             'SourceOrient',   {{'fixed'}}, ...
             'Loose',          0.2, ...
             'UseDepth',       0, ...
             'WeightExp',      0.5, ...
             'WeightLimit',    10, ...
             'NoiseMethod',    'reg', ...
             'NoiseReg',       0.1, ...
             'SnrMethod',      'fixed', ...
             'SnrRms',         1e-06, ...
             'SnrFixed',       3, ...
             'ComputeKernel',  1, ...
             'DataTypes',      {{'EEG'}}));

        %Find file source filenames for difference ERPs
        for icon=1:4
            sFiles_source(icon).file=sFiles(icon).FileName;
        end
    
        % Obtain source localisation differences between our comparisons of interest
        for icomp=1:3
            sFiles=[];
            sFiles{icomp}= sFiles_source(COMP(icomp,1)).file;
            sFiles2{icomp}=sFiles_source(COMP(icomp,2)).file;
        
    
            % Process: Difference: A-B
            sFiles = bst_process('CallProcess', 'process_diff_ab', sFiles{icomp}, sFiles2{icomp}, ...
                'source_abs', 0);
            
            % Process: Set name: deviant - standard
            sFiles = bst_process('CallProcess', 'process_set_comment', sFiles, [], ...
                'tag',           PE{icomp}, ...
                'isindex',       1);
            
            % Process: Low-pass:40Hz
            sFiles = bst_process('CallProcess', 'process_bandpass', sFiles, [], ...
                'highpass',    0, ...
                'lowpass',     40, ...
                'tranband',    0, ...
                'attenuation', 'strict', ...  % 60dB
                'ver',         '2019', ...  % 2019
                'mirror',      0, ...
                'overwrite',   1);
            save(strcat(resultpath,sublists{isub},'\',subnames{isub},'_',PE{icomp}),'sFiles')
            
            % Process: Z-score transformation: [-100ms,0ms]
            sFiles = bst_process('CallProcess', 'process_baseline_norm', sFiles, [], ...
                'baseline',   [-0.1, 0], ...
                'source_abs', 0, ...
                'method',     'zscore', ...  % Z-score transformation:    x_std = (x - &mu;) / &sigma;
                'overwrite',  0);
        end

end
%% Perform grand-averaging

% Obtain file link to be used for grand-averaging
sFiles=[];
for isub=1:length(sublists)
    for icomp=1:3
        temp=[];
        temp=load(strcat(resultpath,sublists{isub},'\',subnames{isub},'_',PE{icomp},'.mat'));

        sFiles{icomp,isub}=temp.sFiles;
        GA_input{icomp,isub}=sFiles{icomp,isub}.FileName;%links for individual files to be used for grand-averaging
    end
end

% Perform grand-averaging
for icomp=1:3
    % Process: Average: By trial group (grand average)
    sFiles = bst_process('CallProcess', 'process_average', {GA_input{icomp,:}}, [], ...
    'avgtype',         7, ...  % By trial group (grand average)
    'avg_func',        1, ...  % Arithmetic average:  mean(x)
    'weighted',        0, ...
    'scalenormalized', 0);
end